//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""00d3571d-fa66-44c9-8a93-435b638bb407"",
            ""actions"": [
                {
                    ""name"": ""OpenOrCloseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""6fab9b44-2a77-4c77-9a6d-8d1b72bc0a69"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ad6a39d5-9278-4e6c-b4df-0afce6bb48de"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenOrCloseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""0a871a89-6c48-44a7-8103-a51a375185a2"",
            ""actions"": [
                {
                    ""name"": ""PlayerMovement"",
                    ""type"": ""Value"",
                    ""id"": ""9accd37c-2d45-4b56-8290-1f0c8b2e6329"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3da45ea7-73e7-4bd5-b137-0b500b9b28f3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e5066c10-b9a1-4bc5-a14f-36c76f76537a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0a24f65a-adee-4f0c-840f-0fe3e2199d09"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""327809b2-5fed-4eaa-906e-71629a50f847"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e0f7d9f5-aab9-42c0-aa6c-63fffcd80b28"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerShooting"",
            ""id"": ""fff08dc3-6ffe-4331-813c-1baf855c5211"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""24ded51d-b9ab-46b6-94cc-0d61846a7174"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f96e7405-e733-4946-bb35-bd261fd09a01"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MousePosition"",
            ""id"": ""48c98000-1a86-4344-9254-f9f5d678829d"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""2b434a69-e7ec-4af0-a688-57cb99d4be0b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c67bbfa2-40ac-40cb-b7e9-240fd20e6f37"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlacementObjectMode"",
            ""id"": ""842fe3a8-fc4b-400a-a88d-0f8b030699b2"",
            ""actions"": [
                {
                    ""name"": ""RotatingObject"",
                    ""type"": ""Value"",
                    ""id"": ""48b6b4a1-ff3d-460c-b48f-c4dfe724ca4d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChooseTypeOfBarrirer"",
                    ""type"": ""Button"",
                    ""id"": ""d02bab70-de29-47ca-b3e0-4c6a105e2e0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TogglePlacementMode"",
                    ""type"": ""Button"",
                    ""id"": ""51d20c90-07c0-41f9-b70c-4c7c796af66b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DeactivatePlacementMode"",
                    ""type"": ""Button"",
                    ""id"": ""c7362065-7019-4742-b32e-d20ca73377ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceObject"",
                    ""type"": ""Button"",
                    ""id"": ""36c0af4e-6cd2-4406-b6be-4f4ed4b86bc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9c8eab99-f6bf-4149-9303-d16a49d1a5e7"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotatingObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d836407-9729-48ae-a140-f2b824fbc2a9"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePlacementMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""356b466b-886d-43ef-b7ca-f2264588a02a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeactivatePlacementMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32c4f3e1-1d8f-4ec8-8b0f-5c72a156ced3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeactivatePlacementMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""283762f9-5180-483f-ac3d-aaa7dfc13a13"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""492676c5-d568-4363-b60f-937c4180607d"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseTypeOfBarrirer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eed66762-2ee8-4e64-9c4a-06eabe096afa"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseTypeOfBarrirer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75ed777a-224e-4652-b5b9-4e8f8106e625"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseTypeOfBarrirer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9919677-afab-4cd6-8671-d774772c71f2"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseTypeOfBarrirer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlacementTurretMode"",
            ""id"": ""242b474d-d519-496f-9eea-e990df5b041a"",
            ""actions"": [
                {
                    ""name"": ""RotatingTurret"",
                    ""type"": ""Value"",
                    ""id"": ""c26e79ac-c3f6-449f-8927-846447c67145"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChooseTypeTurret"",
                    ""type"": ""Button"",
                    ""id"": ""46869ec8-a557-4ace-ab1a-c35adaa3bf1a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TogglePlacementMode"",
                    ""type"": ""Button"",
                    ""id"": ""c13711b7-8cf3-478e-bbe6-e7af69112d29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DeactivateMode"",
                    ""type"": ""Button"",
                    ""id"": ""f658a1f5-a601-4f13-b0a9-9003b2920e78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceTurret"",
                    ""type"": ""Button"",
                    ""id"": ""a26d8508-2ed8-4d36-a8ad-18b65a3917f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2dfd656b-a1ba-4a3b-a01c-7205e8679244"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotatingTurret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1cf1e5c4-5fa3-471c-a26d-89a27786bbad"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePlacementMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1a85e2f-f487-4e07-b9a1-3cfeba35d5a7"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeactivateMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be6e51a9-0128-4abe-9747-8807c99c41ab"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeactivateMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03e74877-6bc1-4760-970b-8e10f7fad47c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceTurret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b55d9f77-f18d-4c66-9d54-26998be755a9"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseTypeTurret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66ba8822-6616-4e26-b79e-3cae3a703825"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseTypeTurret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b8bb5bc-ec86-4243-83ef-77b4ffe30993"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseTypeTurret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78eb186e-4dd6-4d74-a39c-a2b7e011ca20"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseTypeTurret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_OpenOrCloseMenu = m_UI.FindAction("OpenOrCloseMenu", throwIfNotFound: true);
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_PlayerMovement = m_PlayerMovement.FindAction("PlayerMovement", throwIfNotFound: true);
        // PlayerShooting
        m_PlayerShooting = asset.FindActionMap("PlayerShooting", throwIfNotFound: true);
        m_PlayerShooting_Shoot = m_PlayerShooting.FindAction("Shoot", throwIfNotFound: true);
        // MousePosition
        m_MousePosition = asset.FindActionMap("MousePosition", throwIfNotFound: true);
        m_MousePosition_MousePosition = m_MousePosition.FindAction("MousePosition", throwIfNotFound: true);
        // PlacementObjectMode
        m_PlacementObjectMode = asset.FindActionMap("PlacementObjectMode", throwIfNotFound: true);
        m_PlacementObjectMode_RotatingObject = m_PlacementObjectMode.FindAction("RotatingObject", throwIfNotFound: true);
        m_PlacementObjectMode_ChooseTypeOfBarrirer = m_PlacementObjectMode.FindAction("ChooseTypeOfBarrirer", throwIfNotFound: true);
        m_PlacementObjectMode_TogglePlacementMode = m_PlacementObjectMode.FindAction("TogglePlacementMode", throwIfNotFound: true);
        m_PlacementObjectMode_DeactivatePlacementMode = m_PlacementObjectMode.FindAction("DeactivatePlacementMode", throwIfNotFound: true);
        m_PlacementObjectMode_PlaceObject = m_PlacementObjectMode.FindAction("PlaceObject", throwIfNotFound: true);
        // PlacementTurretMode
        m_PlacementTurretMode = asset.FindActionMap("PlacementTurretMode", throwIfNotFound: true);
        m_PlacementTurretMode_RotatingTurret = m_PlacementTurretMode.FindAction("RotatingTurret", throwIfNotFound: true);
        m_PlacementTurretMode_ChooseTypeTurret = m_PlacementTurretMode.FindAction("ChooseTypeTurret", throwIfNotFound: true);
        m_PlacementTurretMode_TogglePlacementMode = m_PlacementTurretMode.FindAction("TogglePlacementMode", throwIfNotFound: true);
        m_PlacementTurretMode_DeactivateMode = m_PlacementTurretMode.FindAction("DeactivateMode", throwIfNotFound: true);
        m_PlacementTurretMode_PlaceTurret = m_PlacementTurretMode.FindAction("PlaceTurret", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_OpenOrCloseMenu;
    public struct UIActions
    {
        private @PlayerInput m_Wrapper;
        public UIActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenOrCloseMenu => m_Wrapper.m_UI_OpenOrCloseMenu;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @OpenOrCloseMenu.started += instance.OnOpenOrCloseMenu;
            @OpenOrCloseMenu.performed += instance.OnOpenOrCloseMenu;
            @OpenOrCloseMenu.canceled += instance.OnOpenOrCloseMenu;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @OpenOrCloseMenu.started -= instance.OnOpenOrCloseMenu;
            @OpenOrCloseMenu.performed -= instance.OnOpenOrCloseMenu;
            @OpenOrCloseMenu.canceled -= instance.OnOpenOrCloseMenu;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_PlayerMovement;
    public struct PlayerMovementActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerMovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerMovement => m_Wrapper.m_PlayerMovement_PlayerMovement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @PlayerMovement.started += instance.OnPlayerMovement;
            @PlayerMovement.performed += instance.OnPlayerMovement;
            @PlayerMovement.canceled += instance.OnPlayerMovement;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @PlayerMovement.started -= instance.OnPlayerMovement;
            @PlayerMovement.performed -= instance.OnPlayerMovement;
            @PlayerMovement.canceled -= instance.OnPlayerMovement;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // PlayerShooting
    private readonly InputActionMap m_PlayerShooting;
    private List<IPlayerShootingActions> m_PlayerShootingActionsCallbackInterfaces = new List<IPlayerShootingActions>();
    private readonly InputAction m_PlayerShooting_Shoot;
    public struct PlayerShootingActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerShootingActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_PlayerShooting_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_PlayerShooting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerShootingActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerShootingActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerShootingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerShootingActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IPlayerShootingActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IPlayerShootingActions instance)
        {
            if (m_Wrapper.m_PlayerShootingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerShootingActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerShootingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerShootingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerShootingActions @PlayerShooting => new PlayerShootingActions(this);

    // MousePosition
    private readonly InputActionMap m_MousePosition;
    private List<IMousePositionActions> m_MousePositionActionsCallbackInterfaces = new List<IMousePositionActions>();
    private readonly InputAction m_MousePosition_MousePosition;
    public struct MousePositionActions
    {
        private @PlayerInput m_Wrapper;
        public MousePositionActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_MousePosition_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_MousePosition; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MousePositionActions set) { return set.Get(); }
        public void AddCallbacks(IMousePositionActions instance)
        {
            if (instance == null || m_Wrapper.m_MousePositionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MousePositionActionsCallbackInterfaces.Add(instance);
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
        }

        private void UnregisterCallbacks(IMousePositionActions instance)
        {
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
        }

        public void RemoveCallbacks(IMousePositionActions instance)
        {
            if (m_Wrapper.m_MousePositionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMousePositionActions instance)
        {
            foreach (var item in m_Wrapper.m_MousePositionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MousePositionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MousePositionActions @MousePosition => new MousePositionActions(this);

    // PlacementObjectMode
    private readonly InputActionMap m_PlacementObjectMode;
    private List<IPlacementObjectModeActions> m_PlacementObjectModeActionsCallbackInterfaces = new List<IPlacementObjectModeActions>();
    private readonly InputAction m_PlacementObjectMode_RotatingObject;
    private readonly InputAction m_PlacementObjectMode_ChooseTypeOfBarrirer;
    private readonly InputAction m_PlacementObjectMode_TogglePlacementMode;
    private readonly InputAction m_PlacementObjectMode_DeactivatePlacementMode;
    private readonly InputAction m_PlacementObjectMode_PlaceObject;
    public struct PlacementObjectModeActions
    {
        private @PlayerInput m_Wrapper;
        public PlacementObjectModeActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotatingObject => m_Wrapper.m_PlacementObjectMode_RotatingObject;
        public InputAction @ChooseTypeOfBarrirer => m_Wrapper.m_PlacementObjectMode_ChooseTypeOfBarrirer;
        public InputAction @TogglePlacementMode => m_Wrapper.m_PlacementObjectMode_TogglePlacementMode;
        public InputAction @DeactivatePlacementMode => m_Wrapper.m_PlacementObjectMode_DeactivatePlacementMode;
        public InputAction @PlaceObject => m_Wrapper.m_PlacementObjectMode_PlaceObject;
        public InputActionMap Get() { return m_Wrapper.m_PlacementObjectMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlacementObjectModeActions set) { return set.Get(); }
        public void AddCallbacks(IPlacementObjectModeActions instance)
        {
            if (instance == null || m_Wrapper.m_PlacementObjectModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlacementObjectModeActionsCallbackInterfaces.Add(instance);
            @RotatingObject.started += instance.OnRotatingObject;
            @RotatingObject.performed += instance.OnRotatingObject;
            @RotatingObject.canceled += instance.OnRotatingObject;
            @ChooseTypeOfBarrirer.started += instance.OnChooseTypeOfBarrirer;
            @ChooseTypeOfBarrirer.performed += instance.OnChooseTypeOfBarrirer;
            @ChooseTypeOfBarrirer.canceled += instance.OnChooseTypeOfBarrirer;
            @TogglePlacementMode.started += instance.OnTogglePlacementMode;
            @TogglePlacementMode.performed += instance.OnTogglePlacementMode;
            @TogglePlacementMode.canceled += instance.OnTogglePlacementMode;
            @DeactivatePlacementMode.started += instance.OnDeactivatePlacementMode;
            @DeactivatePlacementMode.performed += instance.OnDeactivatePlacementMode;
            @DeactivatePlacementMode.canceled += instance.OnDeactivatePlacementMode;
            @PlaceObject.started += instance.OnPlaceObject;
            @PlaceObject.performed += instance.OnPlaceObject;
            @PlaceObject.canceled += instance.OnPlaceObject;
        }

        private void UnregisterCallbacks(IPlacementObjectModeActions instance)
        {
            @RotatingObject.started -= instance.OnRotatingObject;
            @RotatingObject.performed -= instance.OnRotatingObject;
            @RotatingObject.canceled -= instance.OnRotatingObject;
            @ChooseTypeOfBarrirer.started -= instance.OnChooseTypeOfBarrirer;
            @ChooseTypeOfBarrirer.performed -= instance.OnChooseTypeOfBarrirer;
            @ChooseTypeOfBarrirer.canceled -= instance.OnChooseTypeOfBarrirer;
            @TogglePlacementMode.started -= instance.OnTogglePlacementMode;
            @TogglePlacementMode.performed -= instance.OnTogglePlacementMode;
            @TogglePlacementMode.canceled -= instance.OnTogglePlacementMode;
            @DeactivatePlacementMode.started -= instance.OnDeactivatePlacementMode;
            @DeactivatePlacementMode.performed -= instance.OnDeactivatePlacementMode;
            @DeactivatePlacementMode.canceled -= instance.OnDeactivatePlacementMode;
            @PlaceObject.started -= instance.OnPlaceObject;
            @PlaceObject.performed -= instance.OnPlaceObject;
            @PlaceObject.canceled -= instance.OnPlaceObject;
        }

        public void RemoveCallbacks(IPlacementObjectModeActions instance)
        {
            if (m_Wrapper.m_PlacementObjectModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlacementObjectModeActions instance)
        {
            foreach (var item in m_Wrapper.m_PlacementObjectModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlacementObjectModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlacementObjectModeActions @PlacementObjectMode => new PlacementObjectModeActions(this);

    // PlacementTurretMode
    private readonly InputActionMap m_PlacementTurretMode;
    private List<IPlacementTurretModeActions> m_PlacementTurretModeActionsCallbackInterfaces = new List<IPlacementTurretModeActions>();
    private readonly InputAction m_PlacementTurretMode_RotatingTurret;
    private readonly InputAction m_PlacementTurretMode_ChooseTypeTurret;
    private readonly InputAction m_PlacementTurretMode_TogglePlacementMode;
    private readonly InputAction m_PlacementTurretMode_DeactivateMode;
    private readonly InputAction m_PlacementTurretMode_PlaceTurret;
    public struct PlacementTurretModeActions
    {
        private @PlayerInput m_Wrapper;
        public PlacementTurretModeActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotatingTurret => m_Wrapper.m_PlacementTurretMode_RotatingTurret;
        public InputAction @ChooseTypeTurret => m_Wrapper.m_PlacementTurretMode_ChooseTypeTurret;
        public InputAction @TogglePlacementMode => m_Wrapper.m_PlacementTurretMode_TogglePlacementMode;
        public InputAction @DeactivateMode => m_Wrapper.m_PlacementTurretMode_DeactivateMode;
        public InputAction @PlaceTurret => m_Wrapper.m_PlacementTurretMode_PlaceTurret;
        public InputActionMap Get() { return m_Wrapper.m_PlacementTurretMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlacementTurretModeActions set) { return set.Get(); }
        public void AddCallbacks(IPlacementTurretModeActions instance)
        {
            if (instance == null || m_Wrapper.m_PlacementTurretModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlacementTurretModeActionsCallbackInterfaces.Add(instance);
            @RotatingTurret.started += instance.OnRotatingTurret;
            @RotatingTurret.performed += instance.OnRotatingTurret;
            @RotatingTurret.canceled += instance.OnRotatingTurret;
            @ChooseTypeTurret.started += instance.OnChooseTypeTurret;
            @ChooseTypeTurret.performed += instance.OnChooseTypeTurret;
            @ChooseTypeTurret.canceled += instance.OnChooseTypeTurret;
            @TogglePlacementMode.started += instance.OnTogglePlacementMode;
            @TogglePlacementMode.performed += instance.OnTogglePlacementMode;
            @TogglePlacementMode.canceled += instance.OnTogglePlacementMode;
            @DeactivateMode.started += instance.OnDeactivateMode;
            @DeactivateMode.performed += instance.OnDeactivateMode;
            @DeactivateMode.canceled += instance.OnDeactivateMode;
            @PlaceTurret.started += instance.OnPlaceTurret;
            @PlaceTurret.performed += instance.OnPlaceTurret;
            @PlaceTurret.canceled += instance.OnPlaceTurret;
        }

        private void UnregisterCallbacks(IPlacementTurretModeActions instance)
        {
            @RotatingTurret.started -= instance.OnRotatingTurret;
            @RotatingTurret.performed -= instance.OnRotatingTurret;
            @RotatingTurret.canceled -= instance.OnRotatingTurret;
            @ChooseTypeTurret.started -= instance.OnChooseTypeTurret;
            @ChooseTypeTurret.performed -= instance.OnChooseTypeTurret;
            @ChooseTypeTurret.canceled -= instance.OnChooseTypeTurret;
            @TogglePlacementMode.started -= instance.OnTogglePlacementMode;
            @TogglePlacementMode.performed -= instance.OnTogglePlacementMode;
            @TogglePlacementMode.canceled -= instance.OnTogglePlacementMode;
            @DeactivateMode.started -= instance.OnDeactivateMode;
            @DeactivateMode.performed -= instance.OnDeactivateMode;
            @DeactivateMode.canceled -= instance.OnDeactivateMode;
            @PlaceTurret.started -= instance.OnPlaceTurret;
            @PlaceTurret.performed -= instance.OnPlaceTurret;
            @PlaceTurret.canceled -= instance.OnPlaceTurret;
        }

        public void RemoveCallbacks(IPlacementTurretModeActions instance)
        {
            if (m_Wrapper.m_PlacementTurretModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlacementTurretModeActions instance)
        {
            foreach (var item in m_Wrapper.m_PlacementTurretModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlacementTurretModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlacementTurretModeActions @PlacementTurretMode => new PlacementTurretModeActions(this);
    public interface IUIActions
    {
        void OnOpenOrCloseMenu(InputAction.CallbackContext context);
    }
    public interface IPlayerMovementActions
    {
        void OnPlayerMovement(InputAction.CallbackContext context);
    }
    public interface IPlayerShootingActions
    {
        void OnShoot(InputAction.CallbackContext context);
    }
    public interface IMousePositionActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
    }
    public interface IPlacementObjectModeActions
    {
        void OnRotatingObject(InputAction.CallbackContext context);
        void OnChooseTypeOfBarrirer(InputAction.CallbackContext context);
        void OnTogglePlacementMode(InputAction.CallbackContext context);
        void OnDeactivatePlacementMode(InputAction.CallbackContext context);
        void OnPlaceObject(InputAction.CallbackContext context);
    }
    public interface IPlacementTurretModeActions
    {
        void OnRotatingTurret(InputAction.CallbackContext context);
        void OnChooseTypeTurret(InputAction.CallbackContext context);
        void OnTogglePlacementMode(InputAction.CallbackContext context);
        void OnDeactivateMode(InputAction.CallbackContext context);
        void OnPlaceTurret(InputAction.CallbackContext context);
    }
}
